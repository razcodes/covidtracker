{"version":3,"sources":["components/DateList.js","components/CountryCard.js","components/DateBox.js","components/SelectCountry.js","components/CovidTracker.js","App.js","index.js"],"names":["DateList","props","useState","countryData","setCountryData","useEffect","createCountryDataObject","dates","data","Object","entries","map","a","i","undefined","countryCode","id","date_value","confirmed","deaths","calcDailyConfirmed","confirmedArray","day","length","push","newArr","num","daily","newConfirmed","CountryDataHTML","value","className","key","formatDate","toLocaleString","style","input","datePart","match","year","substring","month","isLoadingDates","CircularProgress","CountryCard","countryImage","countryName","src","alt","width","dateList","A3CountryCode","DateBox","editableDateInputs","onChange","item","setDateRange","selection","dateWasSet","moveRangeOnFirstSelection","ranges","dateRange","SelectCountry","countryNamesList","setCountryNamesList","axios","get","then","res","country","name","A3","alpha3Code","Autocomplete","event","countryPicked","options","getOptionLabel","option","margin","renderInput","params","TextField","label","variant","CovidTracker","setIsLoadingDates","Date","startDate","setStartDate","endDate","setEndDate","setDateList","A3CountryCodeList","setA3CountryCodeList","setA3CountryCode","setCountryImage","setCountryName","isLoading","setIsLoading","countryCardRef","useRef","countries","getCountryDataAccordingToDates","date","d","getMonth","getDate","getFullYear","join","config","headers","current","scrollIntoView","behavior","x","countryRes","flag","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9976f48.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function DateList(props){\r\n    const [countryData, setCountryData] = useState();\r\n\r\n    useEffect(() => {\r\n        createCountryDataObject();\r\n    },[props.dates])\r\n\r\n    const createCountryDataObject = () => {\r\n        if(props.dates){\r\n            const data = Object.entries(props.dates).map((a, i)=>{\r\n                if(a[1][props.countryCode]!==undefined){\r\n                    return ({\r\n                        id: i,\r\n                        date_value: a[0],\r\n                        data: {\r\n                            confirmed: a[1][props.countryCode].confirmed,\r\n                            deaths: a[1][props.countryCode].deaths\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            calcDailyConfirmed(data);\r\n        }\r\n    }\r\n    \r\n\r\n    const calcDailyConfirmed = (data) => {        \r\n\r\n        // Creating an array made of confirmed infected\r\n        const confirmedArray = [];\r\n        data.map((day, i) => {\r\n            if(day !== undefined){\r\n                if(i === data.length-1 || (data[i+1] == undefined && i !== data.length-1)){\r\n                    confirmedArray.push(day.data.confirmed)\r\n                    return;\r\n                }\r\n                else if(data[i+1] !== undefined){\r\n                    confirmedArray.push(day.data.confirmed)\r\n                    return;\r\n                }\r\n            }\r\n            confirmedArray.push(null)\r\n            return;\r\n\r\n        })\r\n        //console.log(\"confirmedArray: \", confirmedArray)\r\n\r\n        // Creating an array based on the confirmed one with daily infected\r\n        const newArr = [null];\r\n        confirmedArray.map((num, i)=>{\r\n            if(confirmedArray.length > 1){\r\n                if(i === confirmedArray.length-1){\r\n                    let daily = confirmedArray[i]-confirmedArray[i-1];\r\n                    newArr[i]=daily;\r\n                }\r\n                else if(num!==null){\r\n                    let daily = confirmedArray[i+1]-num;\r\n                    newArr[i]=daily;\r\n                }\r\n                else{\r\n                    newArr[i]=null;\r\n                }\r\n            }\r\n        })\r\n        //console.log(\"newArr: \", newArr)\r\n\r\n        const newConfirmed = data.map((day, i) => {\r\n            if(i===data.length-1 && day){\r\n                return ({\r\n                    id: day.id,\r\n                    date_value: day.date_value,\r\n                    data: {\r\n                        confirmed: day.data.confirmed,\r\n                        deaths: day.data.deaths,\r\n                        daily: newArr[i]\r\n                    }\r\n                })\r\n            }\r\n            if(day !== undefined){\r\n                return ({\r\n                    id: day.id,\r\n                    date_value: day.date_value,\r\n                    data: {\r\n                        confirmed: day.data.confirmed,\r\n                        deaths: day.data.deaths,\r\n                        daily: newArr[i-1]>0 ? newArr[i-1]:null\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        setCountryData(newConfirmed);\r\n        //console.log(\"New confirmed: \", newConfirmed)\r\n    }\r\n\r\n    const CountryDataHTML = () => (\r\n        Object.entries(countryData).map(([key, value], i)=>(\r\n            <div className='date-box' key={i}>\r\n                <div>{!value &&\r\n                    <div className=\"date-text\">\r\n                        <div><b>No data for this date</b></div>\r\n                    </div>}\r\n                    {value && <div className=\"date-text\">\r\n                            {value.date_value && <div><b>{formatDate(value.date_value)}</b></div>}\r\n                            {value.data.confirmed && <div>Confirmed: {value.data.confirmed.toLocaleString()}</div>}\r\n                            {value.data.deaths !== null && <div>Deaths: {value.data.deaths.toLocaleString()}</div>}\r\n                            {value.data.daily && <div style={{ 'color': 'red' }}>Daily infected: {value.data.daily.toLocaleString()}</div>}\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        ))\r\n    )\r\n\r\n    const formatDate = (input) => {\r\n        const datePart = input.match(/\\d+/g),\r\n        year = datePart[0].substring(2), // get only two digits\r\n        month = datePart[1], day = datePart[2];\r\n      \r\n        return day+'/'+month+'/'+year;\r\n    }\r\n    \r\n    return(\r\n        <div className='datelist'>\r\n            \r\n            {!props.isLoadingDates && \r\n                countryData && <CountryDataHTML />}\r\n\r\n            {props.isLoadingDates && \r\n            <div \r\n                style={{'marginTop': '5px'}}>\r\n                    <CircularProgress />\r\n            </div>}\r\n        </div>\r\n    )   \r\n}\r\n","import React from 'react';\r\nimport DateList from './DateList';\r\n\r\nexport default function CountryCard(props){\r\n    return(\r\n        props.countryImage && \r\n        <div>\r\n            <h3>{props.countryName}</h3>\r\n            <img className=\"flag\" src={props.countryImage} alt={props.countryName+\"'s flag\"} width=\"200px\"></img>\r\n            <br></br>\r\n            <br></br>\r\n            <DateList dates={props.dateList} countryCode={props.A3CountryCode} isLoadingDates={props.isLoadingDates}/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { DateRange } from 'react-date-range';\r\n\r\nexport default function DateBox(props) {\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"no-margin subheader\">\r\n                Select a range of dates\r\n            </p>\r\n\r\n            <DateRange\r\n                editableDateInputs={true}\r\n                onChange={item => {props.setDateRange([item.selection]); props.dateWasSet(item.selection)}}\r\n                moveRangeOnFirstSelection={false}\r\n                ranges={props.dateRange}\r\n            /> \r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React, { useEffect,useState } from 'react';\r\nimport axios from 'axios';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function SelectCountry(props) {\r\n    const [countryNamesList, setCountryNamesList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('https://restcountries.eu/rest/v2/all')\r\n        .then((res) => {\r\n            setCountryNamesList(res.data.map(country => {\r\n                return {\r\n                    name: country.name,\r\n                    A3: country.alpha3Code\r\n                }\r\n            }))\r\n        })\r\n    },[])\r\n    \r\n    const selectionOptions = \r\n        Object.entries(countryNamesList)\r\n            .map(([key, value], i) => (<option key={i} value={value.A3}>{value.name}</option>));\r\n\r\n    const autocompleteStyle = {\r\n        width: \"300px\",\r\n        margin: \"auto\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            onChange={(event, value) => {\r\n                if(value !== null)\r\n                    props.countryPicked(value.A3)\r\n            }}\r\n            options={countryNamesList}\r\n            getOptionLabel={(option) => option.name}\r\n            style={autocompleteStyle}\r\n            renderInput={(params) => <TextField {...params} label=\"Country\" variant=\"outlined\" />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport CountryCard from './CountryCard';\r\nimport 'react-date-range/dist/styles.css'; // main css file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport DateBox from './DateBox.js';\r\nimport SelectCountry from './SelectCountry.js';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function CovidTracker(){\r\n    const [isLoadingDates, setIsLoadingDates] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [dateList, setDateList] = useState([]);\r\n    const [A3CountryCodeList, setA3CountryCodeList] = useState([]);\r\n    const [A3CountryCode, setA3CountryCode] = useState('');\r\n    const [countryImage, setCountryImage] = useState('');\r\n    const [countryName, setCountryName] = useState([]);\r\n    const [isLoading, setIsLoading] = useState();\r\n    const [dateRange, setDateRange] = useState([{\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        key: 'selection'\r\n    }]);\r\n    const countryCardRef = useRef();\r\n    \r\n    \r\n    useEffect(() => {\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2020-09-04/2020-09-04`)\r\n        .then((res) => {\r\n            setA3CountryCodeList(res.data.countries)\r\n        })\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        getCountryDataAccordingToDates();\r\n    }, [dateRange])\r\n    \r\n    const formatDate = (date) => {\r\n        let d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n    \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Access-Control-Allow-Origin': 'localhost:3000',\r\n            'Access-Control-Allow-Credentials': 'true'\r\n        }\r\n    }\r\n\r\n    const countryPicked = (value) => {\r\n        if(value!==''){\r\n            setCountryName('');\r\n            setCountryImage('');\r\n            let A3CountryCode = value;\r\n            setA3CountryCode(A3CountryCode);\r\n            setIsLoading(true);\r\n            axios.get(`https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/alpha/${A3CountryCode}`, config)\r\n            .then((countryRes) => {\r\n                setCountryName(countryRes.data.name);\r\n                setCountryImage(countryRes.data.flag);\r\n                setIsLoading(false);\r\n                getCountryDataAccordingToDates();\r\n            })\r\n        }\r\n    }\r\n    \r\n    const getCountryDataAccordingToDates = () => {\r\n        setIsLoadingDates(true)\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/${formatDate(startDate)}/${formatDate(endDate)}`)\r\n        .then((res) => { \r\n            setDateList(res.data.data);\r\n            setIsLoadingDates(false);\r\n            countryCardRef.current.scrollIntoView({behavior: \"smooth\"})\r\n        })\r\n    }\r\n\r\n    const dateWasSet = (x) => {\r\n        setStartDate(formatDate(x.startDate));\r\n        setEndDate(formatDate(x.endDate));\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1 className='header no-margin'>\r\n                Covid Tracker\r\n            </h1>\r\n\r\n            <DateBox setDateRange={setDateRange} dateWasSet={dateWasSet} dateRange={dateRange} />\r\n\r\n            <p className=\"subheader margin-5\">\r\n                Select a Country\r\n            </p><br />\r\n\r\n            <SelectCountry \r\n                A3CountryCode={A3CountryCode}\r\n                A3CountryCodeList={A3CountryCodeList}\r\n                countryPicked={countryPicked}\r\n                dateWasSet={dateWasSet}\r\n                />\r\n\r\n            {!isLoading && \r\n                <div ref={countryCardRef}>\r\n                    <CountryCard \r\n                        dateList={dateList} \r\n                        A3CountryCode={A3CountryCode} \r\n                        countryImage={countryImage} \r\n                        countryName={countryName}\r\n                        isLoadingDates={isLoadingDates}\r\n                    />\r\n                </div>}\r\n\r\n            {isLoading && \r\n                <div \r\n                    style={{'marginTop': '5px'}}>\r\n                        <CircularProgress />\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport CovidTracker from './components/CovidTracker';\r\n//import LineChart from './components/LineChart';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <div className=\"chart\">\r\n        <LineChart />\r\n      </div> */}\r\n      <CovidTracker />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}