{"version":3,"sources":["components/DateList.js","components/CountryCard.js","components/DateBox.js","components/SelectCountry.js","components/CovidTracker.js","App.js","index.js"],"names":["DateList","props","useState","countryData","setCountryData","useEffect","createCountryDataObject","dates","data","Object","entries","map","a","i","undefined","countryCode","id","date_value","confirmed","deaths","calcDailyConfirmed","confirmedArray","day","length","push","console","log","newArr","num","daily","newConfirmed","CountryDataHTML","value","className","key","formatDate","toLocaleString","style","input","datePart","match","year","substring","month","CountryCard","countryImage","countryName","src","alt","width","dateList","A3CountryCode","DateBox","editableDateInputs","onChange","item","setDateRange","selection","dateWasSet","moveRangeOnFirstSelection","ranges","dateRange","SelectCountry","countryNamesList","setCountryNamesList","axios","get","then","res","country","name","A3","alpha3Code","selectionOptions","FormControl","variant","InputLabel","htmlFor","Select","native","event","countryPicked","label","inputProps","aria-label","CovidTracker","Date","startDate","setStartDate","endDate","setEndDate","setDateList","A3CountryCodeList","setA3CountryCodeList","setA3CountryCode","setCountryImage","setCountryName","isLoading","setIsLoading","countryCardRef","useRef","countries","getCountryDataAccordingToDates","date","d","getMonth","getDate","getFullYear","join","config","headers","current","scrollIntoView","behavior","x","target","countryRes","flag","ref","CircularProgress","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2e1f724.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function DateList(props){\r\n    const [countryData, setCountryData] = useState();\r\n\r\n    useEffect(() => {\r\n        createCountryDataObject();\r\n    },[props.dates])\r\n\r\n    const createCountryDataObject = () => {\r\n        const data = Object.entries(props.dates).map((a, i)=>{\r\n            if(a[1][props.countryCode]!==undefined){\r\n                return ({\r\n                    id: i,\r\n                    date_value: a[0],\r\n                    data: {\r\n                        confirmed: a[1][props.countryCode].confirmed,\r\n                        deaths: a[1][props.countryCode].deaths\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        calcDailyConfirmed(data);\r\n    }\r\n    \r\n\r\n    const calcDailyConfirmed = (data) => {        \r\n\r\n        // Creating an array made of confirmed infected\r\n        const confirmedArray = [];\r\n        data.map((day, i) => {\r\n            if(day !== undefined){\r\n                if(i === data.length-1 || (data[i+1] == undefined && i !== data.length-1)){\r\n                    confirmedArray.push(day.data.confirmed)\r\n                    return;\r\n                }\r\n                else if(data[i+1] !== undefined){\r\n                    confirmedArray.push(day.data.confirmed)\r\n                    return;\r\n                }\r\n            }\r\n            confirmedArray.push(null)\r\n            return;\r\n\r\n        })\r\n        console.log(\"confirmedArray: \", confirmedArray)\r\n\r\n        // Creating an array based on the confirmed one with daily infected\r\n        const newArr = [null];\r\n        confirmedArray.map((num, i)=>{\r\n            if(confirmedArray.length > 1){\r\n                if(i === confirmedArray.length-1){\r\n                    let daily = confirmedArray[i]-confirmedArray[i-1];\r\n                    newArr[i]=daily;\r\n                }\r\n                else if(num!==null){\r\n                    let daily = confirmedArray[i+1]-num;\r\n                    newArr[i]=daily;\r\n                }\r\n                else{\r\n                    newArr[i]=null;\r\n                }\r\n            }\r\n        })\r\n        console.log(\"newArr: \", newArr)\r\n\r\n        const newConfirmed = data.map((day, i) => {\r\n            if(i===data.length-1 && day){\r\n                return ({\r\n                    id: day.id,\r\n                    date_value: day.date_value,\r\n                    data: {\r\n                        confirmed: day.data.confirmed,\r\n                        deaths: day.data.deaths,\r\n                        daily: newArr[i]\r\n                    }\r\n                })\r\n            }\r\n            if(day !== undefined){\r\n                return ({\r\n                    id: day.id,\r\n                    date_value: day.date_value,\r\n                    data: {\r\n                        confirmed: day.data.confirmed,\r\n                        deaths: day.data.deaths,\r\n                        daily: newArr[i-1]>0 ? newArr[i-1]:null\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        setCountryData(newConfirmed);\r\n        console.log(\"New confirmed: \", newConfirmed)\r\n    }\r\n\r\n    const CountryDataHTML = () => (\r\n        Object.entries(countryData).map(([key, value], i)=>(\r\n            <div className='date-box' key={i}>\r\n                <div>{!value && \r\n                    <div className=\"date-text\">\r\n                        <div><b>No data for this date</b></div>\r\n                    </div>}\r\n                    {value && <div className=\"date-text\">\r\n                            {value.date_value && <div><b>{formatDate(value.date_value)}</b></div>}\r\n                            {value.data.confirmed && <div>Confirmed: {value.data.confirmed.toLocaleString()}</div>}\r\n                            {value.data.deaths && <div>Deaths: {value.data.deaths.toLocaleString()}</div>}\r\n                            {value.data.daily && <div style={{ 'color': 'red' }}>Daily infected: {value.data.daily.toLocaleString()}</div>}\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        ))\r\n    )\r\n\r\n    const formatDate = (input) => {\r\n        const datePart = input.match(/\\d+/g),\r\n        year = datePart[0].substring(2), // get only two digits\r\n        month = datePart[1], day = datePart[2];\r\n      \r\n        return day+'/'+month+'/'+year;\r\n    }\r\n    \r\n    return(\r\n        <div className='datelist'>\r\n            {countryData && <CountryDataHTML />}\r\n        </div>\r\n    )   \r\n}\r\n","import React from 'react';\r\nimport DateList from './DateList';\r\n\r\nexport default function CountryCard(props){\r\n    return(\r\n        props.countryImage && \r\n        <div>\r\n            <h3>{props.countryName}</h3>\r\n            <img className=\"flag\" src={props.countryImage} alt={props.countryName+\"'s flag\"} width=\"200px\"></img>\r\n            <br></br>\r\n            <br></br>\r\n            <DateList dates={props.dateList} countryCode={props.A3CountryCode}/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { DateRange } from 'react-date-range';\r\n\r\nexport default function DateBox(props) {\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"no-margin subheader\">\r\n                Select a range of dates\r\n            </p>\r\n\r\n            <DateRange\r\n                editableDateInputs={true}\r\n                onChange={item => {props.setDateRange([item.selection]); props.dateWasSet(item.selection)}}\r\n                moveRangeOnFirstSelection={false}\r\n                ranges={props.dateRange}\r\n            /> \r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React, { useEffect,useState } from 'react';\r\nimport axios from 'axios';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport default function SelectCountry(props) {\r\n    const [countryNamesList, setCountryNamesList] = useState('');\r\n\r\n    useEffect(() => {\r\n        axios.get('https://restcountries.eu/rest/v2/all')\r\n        .then((res) => {\r\n            setCountryNamesList(res.data.map(country => {\r\n                return {\r\n                    name: country.name,\r\n                    A3: country.alpha3Code\r\n                }\r\n            }))\r\n        })\r\n    })\r\n    \r\n    const selectionOptions = \r\n        Object.entries(countryNamesList)\r\n            .map(([key, value], i) => (<option key={i} value={value.A3}>{value.name}</option>));\r\n\r\n    return (\r\n        <div>\r\n             <FormControl variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\">Country</InputLabel>\r\n\r\n                <Select\r\n                native\r\n                value={props.A3CountryCode}\r\n                onChange={(event)=>{props.countryPicked(event)}}\r\n                label=\"Country\"\r\n                inputProps={{\r\n                    name: 'Country',\r\n                    id: 'outlined-age-native-simple',\r\n                }}\r\n                >\r\n                <option aria-label=\"None\" value=\"\" \r\n                />\r\n                    {selectionOptions}\r\n                </Select>\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport CountryCard from './CountryCard';\r\nimport 'react-date-range/dist/styles.css'; // main css file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport DateBox from './DateBox.js';\r\nimport SelectCountry from './SelectCountry.js';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function CovidTracker(){\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [dateList, setDateList] = useState([]);\r\n    const [A3CountryCodeList, setA3CountryCodeList] = useState([]);\r\n    const [A3CountryCode, setA3CountryCode] = useState('');\r\n    const [countryImage, setCountryImage] = useState('');\r\n    const [countryName, setCountryName] = useState([]);\r\n    const [isLoading, setIsLoading] = useState();\r\n    const [dateRange, setDateRange] = useState([{\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        key: 'selection'\r\n    }]);\r\n    const countryCardRef = useRef();\r\n    \r\n    \r\n    useEffect(() => {\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2020-09-04/2020-09-04`)\r\n        .then((res) => {\r\n            setA3CountryCodeList(res.data.countries)\r\n        })\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        getCountryDataAccordingToDates();\r\n    }, [dateRange])\r\n    \r\n    const formatDate = (date) => {\r\n        let d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n    \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n            'Access-Control-Allow-Credentials': 'true'\r\n        }\r\n    }\r\n\r\n    const countryPicked = (event) => {\r\n        if(event.target.value!==''){\r\n            setCountryName('');\r\n            setCountryImage('');\r\n            let A3CountryCode = event.target.value;\r\n            setA3CountryCode(A3CountryCode);\r\n            setIsLoading(true);\r\n            axios.get(`https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/alpha/${A3CountryCode}`, config)\r\n            .then((countryRes) => {\r\n                setCountryName(countryRes.data.name);\r\n                setCountryImage(countryRes.data.flag);\r\n                setIsLoading(false);\r\n                getCountryDataAccordingToDates();\r\n            })\r\n        }\r\n    }\r\n\r\n    const getCountryDataAccordingToDates = () => {\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/${formatDate(startDate)}/${formatDate(endDate)}`)\r\n        .then((res) => { \r\n            setDateList(res.data.data);\r\n            setIsLoading(false);\r\n            countryCardRef.current.scrollIntoView({behavior: \"smooth\"})\r\n        })\r\n    }\r\n\r\n    const dateWasSet = (x) => {\r\n        setStartDate(formatDate(x.startDate));\r\n        setEndDate(formatDate(x.endDate));\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1 className='header no-margin'>\r\n                Covid Tracker\r\n            </h1>\r\n\r\n            <DateBox setDateRange={setDateRange} dateWasSet={dateWasSet} dateRange={dateRange} />\r\n\r\n            <p className=\"subheader margin-5\">\r\n                Select a Country\r\n            </p>\r\n\r\n            <SelectCountry \r\n                A3CountryCode={A3CountryCode}\r\n                A3CountryCodeList={A3CountryCodeList}\r\n                countryPicked={countryPicked}\r\n                dateWasSet={dateWasSet}\r\n                />\r\n\r\n            {!isLoading && \r\n                <div ref={countryCardRef}>\r\n                    <CountryCard \r\n                        dateList={dateList} \r\n                        A3CountryCode={A3CountryCode} \r\n                        countryImage={countryImage} \r\n                        countryName={countryName}\r\n                    />\r\n                </div>}\r\n\r\n            {isLoading && \r\n                <div \r\n                    style={{'marginTop': '5px'}}>\r\n                        <CircularProgress />\r\n                </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport CovidTracker from './components/CovidTracker';\r\n//import LineChart from './components/LineChart';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <div className=\"chart\">\r\n        <LineChart />\r\n      </div> */}\r\n      <CovidTracker />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}