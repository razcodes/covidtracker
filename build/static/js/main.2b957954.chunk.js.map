{"version":3,"sources":["components/CountryCard.js","components/CovidTracker.js","App.js","serviceWorker.js","index.js"],"names":["List","props","isLoading","country","countryName","src","countryImage","width","dateList","length","Object","entries","map","confirmed","date_value","deaths","toLocaleString","CovidTracker","useState","setDateList","startDate","setStartDate","endDate","setEndDate","countries","setCountries","setCountry","setCountryImage","setCountryName","setIsLoading","useEffect","axios","get","then","res","data","config","headers","submit","countryRes","console","log","Response","Name","Flag","type","min","max","Date","now","onChange","event","target","value","name","id","keys","key","Button","variant","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b957954.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function List(props){\r\n    return(\r\n        !props.isLoading && props.country && <div>\r\n            <h3>{props.countryName}</h3>\r\n            <img src={props.countryImage} width=\"200px\"></img>\r\n            {props.dateList.length !== 0 && Object.entries(props.dateList).map(([key,value]) => {\r\n                const { confirmed, date_value, deaths } = value[props.country]\r\n                return (\r\n                    <div>\r\n                        <div>Date: {date_value}</div>\r\n                        <div>Confirmed: {confirmed.toLocaleString()}</div>\r\n                        <div>Deaths: {deaths.toLocaleString()}</div>\r\n                        <br></br>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as R from 'ramda';\r\n//import {Bar, Line, Pie} from 'chart'\r\nimport Button from '@material-ui/core/Button';\r\nimport CountryCard from './CountryCard';\r\n\r\nexport default function CovidTracker(){\r\n    const [dateList, setDateList] = useState([]);\r\n    const [startDate, setStartDate] = useState('2020-09-04');\r\n    const [endDate, setEndDate] = useState('2020-09-09');\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState('ABW');\r\n    const [countryImage, setCountryImage] = useState('');\r\n    const [countryName, setCountryName] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2020-09-04/2020-09-04`)\r\n        .then((res) => {\r\n            setCountries(res.data.data['2020-09-04'])\r\n        })\r\n        setIsLoading(false);\r\n    },[])\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n            'Access-Control-Allow-Credentials': 'true'\r\n        }\r\n    }\r\n\r\n    const countryPicked = () => {\r\n        setIsLoading(true);\r\n        axios.get(`https://cors-anywhere.herokuapp.com/http://countryapi.gear.host/v1/Country/getCountries?pAlpha3Code=${country}`, config)\r\n        .then((countryRes) => {\r\n            console.log(\"Name: \",countryRes.data.Response[0].Name)\r\n            console.log(\"Flag: \",countryRes.data.Response[0].Flag)\r\n            setCountryName(countryRes.data.Response[0].Name);\r\n            setCountryImage(countryRes.data.Response[0].Flag);\r\n        })\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const submit = (startDate, endDate) => {\r\n        setIsLoading(true);\r\n        countryPicked();\r\n        setCountryImage('');\r\n        setCountryName('');\r\n        console.log(\"startDate: \"+startDate);\r\n        console.log(\"endDate: \"+endDate);\r\n        axios.get(`https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/${startDate}/${endDate}`)\r\n        .then((res) => { \r\n            setDateList(res.data.data)\r\n        })\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Pick starting date</p>\r\n            <input type=\"date\" min=\"2020-04-01\" max={Date.now()} onChange={event => setStartDate(event.target.value)}></input>\r\n            <p>Pick ending date</p>\r\n            <input type=\"date\" min=\"2020-04-01\" max={Date.now()} onChange={event => setEndDate(event.target.value)}></input>\r\n\r\n            <p>Pick Country</p>\r\n            <select name=\"countries\" id=\"countries\" value={country} onChange={(event) => {setCountry(event.target.value); setIsLoading(true);}}>\r\n                {Object.keys(countries).map(key => (\r\n                    <option value={key}>{key}</option>\r\n                    ))}\r\n            </select>\r\n\r\n            <br></br>\r\n            <br></br>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={event => submit(startDate, endDate)}>SUBMIT</Button>\r\n            <br></br>\r\n            <br></br>\r\n            <CountryCard dateList={dateList} country={country} countryImage={countryImage} countryName={countryName} isLoading={isLoading}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport CovidTracker from './components/CovidTracker';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <CovidTracker />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}